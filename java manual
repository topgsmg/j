/*1. Develop a JAVA program to add TWO matrices of suitable order N (The value of N
should be read from
command line arguments). */

import java.util.Scanner;
public class AddMatrix {
public static void main(String args[])
  {
     int m, n, i, j;
 Scanner in=newScanner(System.in);
 
     System.out.println("Inputnumber of rows of matrix: ");
     m = in.nextInt();
     System.out.println("Input number of columns of matrix: ");
     n  = in.nextInt();
 
     int A[][] = new int[m][n];
     int B[][] = new int[m][n];
     int sum[][] = new int[m][n];
 
     System.out.println("Input elements of first matrix: ");
 
     for (  i = 0 ; i < m ; i++ )
        for ( j = 0 ; j < n ; j++ )
           A[i][j] = in.nextInt();
 
     System.out.println("Input the elements of second matrix: ");
 
     for ( i = 0 ; i < m ; i++ )
        for ( j = 0 ; j < n ; j++ )
           B[i][j] = in.nextInt();
 
     for ( i = 0 ; i < m ; i++ )
        for ( j = 0 ; j < n ; j++ )
            sum[i][j] = A[i][j] + B[i][j];
 
     System.out.println("Sum of the matrices:-");
 
     for ( i = 0 ; i < m ; i++ )
     {
        for ( j = 0 ; j < n ; j++ )
           System.out.print(sum[i][j]+"\t");
 
        System.out.println();
     }
  }
}. (1) two matrices



/*
2. Develop a stack class to hold a maximum of 10 integers with suitable methods.
Develop a JAVA main
method to illustrate Stack opera􀆟ons.
*/


package Programs;
import java.util.Scanner;
class Stack {

private int[] elements;
private int top;

public Stack() {
elements = new int[10];
top = -1;
}
public boolean isEmpty() {
return top == -1;
}
public boolean isFull() {
return top == 9;
}
public void push(int element) {

if (isFull()) {

System.out.println("Stack is full. Cannot push more elements.");
} else {
elements[++top] = element;
System.out.println("Pushed: " + element);
}
}
public void pop() {
if (isEmpty()) {
System.out.println("Stack is empty. Cannot pop elements.");
} else {
int poppedElement = elements[top--];
System.out.println("Popped: " + poppedElement);
}
}
public void printStack() {
if (isEmpty()) {
System.out.println("Stack is empty.");
} else {
System.out.print("Stack: ");
for (int i = 0; i <= top; i++) {
System.out.print(elements[i] + " ");
}
System.out.println();
}
}
}
public class Main {
public static void main(String[] args) {
Stack stack = new Stack();
while(true)
{
System.out.println("Stack Operations");
System.out.println("1. Push");
System.out.println("2. Pop");
System.out.println("3. Display");
System.out.println("4. Exit");
Scanner sc = new Scanner(System.in);
System.out.print("Enter your Choice: ");
int choice = sc.nextInt();
switch(choice)
{
case 1: System.out.println("Enter Number to push: ");
int num = sc.nextInt();
stack.push(num);
break;
case 2:
stack.pop();
break;
case 3: stack.printStack();
break;
case 4: System.exit(0);
break;
default: System.out.println("Invalid choice ");
}
}
}
}(2)






/*
3. A class called Employee, which models an employee with an ID, name and salary, is
designed as shown in
the following class diagram. The method raiseSalary (percent) increases the salary by
the given
percentage. Develop the Employee class and suitable main method for demonstra􀆟on.
*/


package Programs; 
import java.util.Scanner; 
public class Employee {
  private int empId; 
private String name; 
private double salary;

public Employee(int empId, String name, double salary) { 
this.empId = empId;
this.name = name;
this.salary = salary;
}
public void raiseSalary(double percentage) { 
if (percentage > 0) {
double raiseAmount = salary ----*(percentage / 100);
salary += raiseAmount; 
}
}
public void displayInfo() {
System.out.println("Employee ID: " + empId);
System.out.println("Name: " + name); 
System.out.println("Salary: Rs." + String.format("%.2f", salary));
}
public static void main(String[] args) {

Employee emp = new Employee(1, "Dr. STHIRA", 50000.0); Scanner scanner = ---newScanner(System.in);

System.out.println("Employee information before raise:"); 
emp.displayInfo();
System.out.println("Enter the percentage of salary to raise");
int percentage ---=scanner.nextInt();
emp.raiseSalary(percentage);
System.out.println("\nEmployee information after raise:");
emp.displayInfo(); }
} 3👍




/*
4. A class called MyPoint, which models a 2D point with x and y coordinates, is designed as
follows:
*/


package Programs;
public class MyPoint {

private int x;
private int y;

// Default constructor
public MyPoint() {
this.x = 0;
this.y = 0;
}
// Overloaded constructor
public MyPoint(int x, int y) {
this.x = x;
this.y = y;
}
// Setters for x and y
public void setXY(int x, int y) {
this.x = x;
this.y = y;
}
// Getter for x and y
public int[] getXY() {
int[] coordinates = {x, y};
return coordinates;
}
public String toString() {
return "(" + x + ", " + y + ")";
}
public double distance(int x, int y) {
int xDiff = this.x - x;
int yDiff = this.y - y;
return Math.sqrt(xDiff * xDiff + yDiff * yDiff);
}
{
int xDiff = this.x - another.x;
int yDiff = this.y - another.y;
return Math.sqrt(xDiff * xDiff + yDiff * yDiff);
}
public double distance() {
return Math.sqrt(x * x + y * y);
}
public static void main(String[] args) {
MyPoint point1 = new MyPoint(); // Default constructor (0,0)
System.out.println("Point 1: " + point1);

MyPoint point2 = new MyPoint(3,4); // Overloaded constructor (3,4)
System.out.println("Point 2: " + point2);

point1.setXY(1,2);//9 Set coordinates using setXY() method
System.out.println("Point 1 after setXY(): " + point1);

int[] coordinates = point2.getXY(); // Get coordinates using getXY() method
System.out.println("Point 2 coordinates: (" + coordinates[0] + ", " + coordinates[1] +")");
System.out.println("Distance between Point 1 and (1,2): " + point1.distance(1,2));
System.out.println("Distance between Point 1 and Point 2: " + point1.distance(point2));
System.out.println("Distance from Point 2 to origin: " + point1.distance());
}
}4 👍




/*5. Develop a JAVA program to create a class named shape. Create three sub classes
namely: circle, triangle
and square, each class has two member func􀆟ons named draw () and erase ().
Demonstrate polymorphism concepts
by developing suitable methods, defining member data and main program.
*/


package Programs;
//Shape class (Superclass)
class Shape {
public void draw() {
System.out.println("Drawing a shape");
}
public void erase() {
System.out.println("Erasing a shape");
}
}
//Circle class (Subclass)
class Circle extends Shape {
@Override
public void draw() {
System.out.println("Drawing a circle");
}
@Override
public void erase() {
System.out.println("Erasing a circle");
}
}
//Triangle class (Subclass)
class Triangle extends Shape {
@Override
public void draw() {
System.out.println("Drawing a triangle");
}
@Override
public void erase() {
System.out.println("Erasing a triangle");
}
}
//Square class (Subclass)
class Square extends Shape {
@Override
public void draw() {
System.out.println("Drawing a square");
}
@Override
public void erase() {
System.out.println("Erasing a square");
}
}
//Main class
public class Shapes {
public static void main(String[] args) {
// Polymorphism: Creating objects of different subclasses using the reference of the superclass

Shape shape1 = new Circle();
Shape shape2 = new Triangle();
Shape shape3 = new Square();

// Demonstrating polymorphic behavior

shape1.draw(); // Calls draw() method of Circle class
shape1.erase(); // Calls erase() method of Circle class

shape2.draw(); // Calls draw() method of Triangle class
shape2.erase(); // Calls erase() method of Triangle class

shape3.draw(); // Calls draw() method of Square class
shape3.erase(); // Calls erase() method of Square class
}
}(5)

7....
package Programs;
// Resizable interface
interface Resizable {
void resizeWidth(int width);
void resizeHeight(int height);
}
// Rectangle class implementing Resizable interface
class Rectangle implements Resizable {
private int width;
private int height;
// Constructor
public Rectangle(int width, int height) {
this.width = width;
this.height = height;
}
// Implementation of resizeWidth method from Resizable interface
@Override
public void resizeWidth(int width) {
this.width = width;
}
// Implementation of resizeHeight method from Resizable interface
@Override
public void resizeHeight(int height) {
this.height = height;
}
// Method to display the dimensions of the rectangle
public void displayDimensions() {
System.out.println("Width: " + width + ", Height: " + height);
}
}
// Main class
public class Main {
public static void main(String[] args) {
// Creating a Rectangle object
Rectangle rectangle = new Rectangle(10, 20);
System.out.println("Original Dimensions:");
rectangle.displayDimensions(); // Output: Width: 10, Height: 20
// Resizing the rectangle
rectangle.resizeWidth(15);
rectangle.resizeHeight(25);
System.out.println("Dimensions after resizing:");
rectangle.displayDimensions(); // Output: Width: 15, Height: 25
}
}

8......
package Programs;
// OuterClass containing an inner class Inner
class OuterClass {
// Outer class display method
public void display() {
System.out.println("OuterClass display method");
}
// Inner class
class Inner {
// Inner class display method
public void display() {
System.out.println("InnerClass display method");
}
}
}
// Main class
public class Main {
public static void main(String[] args) {
// Creating an object of OuterClass
OuterClass outerObject = new OuterClass();
// Calling display method of OuterClass
outerObject.display(); // Output: OuterClass display method
// Creating an object of Inner class (inside OuterClass)
OuterClass.Inner innerObject = outerObject.new Inner();
// Calling display method of Inner class
innerObject.display(); // Output: InnerClass display method
}
}

9......

// Custom exception class (extends Exception)
class DivisionByZeroException extends Exception {
public DivisionByZeroException(String message) {
super(message);
}
}
// Main class
public class Excep {
public static void main(String[] args) {
int numerator = 10;
int denominator = 0;
try {
// Attempting division
if (denominator == 0) {
// Throwing custom exception if denominator is zero
throw new DivisionByZeroException("Division by zero is not allowed.");
}
int result = numerator / denominator;
System.out.println("Result of division: " + result);
}
catch (DivisionByZeroException e) {
// Catching and handling the custom exception
System.out.println("Exception caught: " + e.getMessage());
}
finally {
// Code in the finally block will always execute, whether an exception occurs or not
System.out.println("Finally block executed.");
}
}
}


10........
package mypack; // Package declaration
public class MyPackageClass {
public void display() {
System.out.println("Hello from MyPackageClass in mypack package!");
}
}
package Programs; // Package declaration
import mypack.MyPackageClass; // Importing the class from mypack package
public class Main {
public static void main(String[] args) {
MyPackageClass myPackageObj = new MyPackageClass();
myPackageObj.display(); // Calling the display method from MyPackageClass
}
}

11....
// Runnable class implementation
class MyRunnable implements Runnable {
public void run() {
for (int i = 1; i <= 5; i++) {
System.out.println("Thread " + Thread.currentThread().getId() + ": " + i);
try {
Thread.sleep(500); // Suspend the thread for 500 milliseconds
} catch (InterruptedException e) {
e.printStackTrace();
}
}
}
}
// Main class
public class Main {
public static void main(String[] args) {
// Creating Runnable objects
MyRunnable myRunnable1 = new MyRunnable();
MyRunnable myRunnable2 = new MyRunnable();
// Creating threads and starting them
Thread thread1 = new Thread(myRunnable1);
Thread thread2 = new Thread(myRunnable2);
// Starting threads using the start() method
thread1.start();
thread2.start();
}
}


12.....


package Programs;
// Custom thread class MyThread extending Thread
class MyThread extends Thread {
// Constructor calling the base class constructor and starting the thread
public MyThread(String name) {
super(name);
start(); // Start the thread when the constructor is called
}
// Run method to be executed when the thread starts
public void run() {
for (int i = 1; i <= 5; i++) {
System.out.println(Thread.currentThread().getName() + ": " + i);
try {
Thread.sleep(1000); // Suspend the thread for 500 milliseconds
} catch (InterruptedException e) {
e.printStackTrace();
}
}
}
}
// Main class public class Main {
public static void main(String[] args) {
// Main thread executing concurrently with the MyThread instance
for (int i = 1; i <= 5; i++) {
System.out.println("Main Thread: " + i);
try {
Thread.sleep(500); // Suspend the main thread for 500 milliseconds
} catch (InterruptedException e) {
e.printStackTrace();
}
}
// Creating an instance of MyThread
MyThread myThread = new MyThread("Child Thread");
// Main thread and child thread executing concurrently
}
}
